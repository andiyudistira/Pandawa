 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;


namespace Siska.Data.BDao 
{
    public partial class BsContext : BrightstarEntityContext {
    	private static readonly EntityMappingStore TypeMappings;
    	
    	static BsContext() 
    	{
    		TypeMappings = new EntityMappingStore();
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(TypeMappings, typeof(Siska.Data.BModel.Pos.IRole));
    		TypeMappings.AddImplMapping<Siska.Data.BModel.Pos.IRole, Siska.Data.BModel.Pos.Role>();
    		provider.AddMappingsForType(TypeMappings, typeof(Siska.Data.BModel.Pos.IUser));
    		TypeMappings.AddImplMapping<Siska.Data.BModel.Pos.IUser, Siska.Data.BModel.Pos.User>();
    		provider.AddMappingsForType(TypeMappings, typeof(Siska.Data.BModel.Pos.IUserSession));
    		TypeMappings.AddImplMapping<Siska.Data.BModel.Pos.IUserSession, Siska.Data.BModel.Pos.UserSession>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the Brightstar Data Object Store that will provide the entity objects</param>
    	public BsContext(IDataObjectStore dataObjectStore) : base(TypeMappings, dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public BsContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(TypeMappings, connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public BsContext() : base(TypeMappings)
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public BsContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(TypeMappings, updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Roles = 	new BrightstarEntitySet<Siska.Data.BModel.Pos.IRole>(this);
    		Users = 	new BrightstarEntitySet<Siska.Data.BModel.Pos.IUser>(this);
    		UserSessions = 	new BrightstarEntitySet<Siska.Data.BModel.Pos.IUserSession>(this);
    	}
    	
    	public IEntitySet<Siska.Data.BModel.Pos.IRole> Roles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Siska.Data.BModel.Pos.IUser> Users
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Siska.Data.BModel.Pos.IUserSession> UserSessions
    	{
    		get; private set;
    	}
    	
    }
}
namespace Siska.Data.BModel.Pos 
{
    
    public partial class Role : BrightstarEntityObject, IRole 
    {
    	public Role(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Role() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of Siska.Data.BModel.Pos.IRole
    
    	public Siska.Data.BModel.Pos.IUser InsertBy
    	{
            get { return GetRelatedObject<Siska.Data.BModel.Pos.IUser>("InsertBy"); }
            set { SetRelatedObject<Siska.Data.BModel.Pos.IUser>("InsertBy", value); }
    	}
    
    	public System.DateTime InsertDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("InsertDate"); }
            		set { SetRelatedProperty("InsertDate", value); }
    	}
    
    	public System.Boolean RecordStatus
    	{
            		get { return GetRelatedProperty<System.Boolean>("RecordStatus"); }
            		set { SetRelatedProperty("RecordStatus", value); }
    	}
    
    	public System.Int32 RoleId
    	{
            		get { return GetRelatedProperty<System.Int32>("RoleId"); }
            		set { SetRelatedProperty("RoleId", value); }
    	}
    
    	public System.String RoleName
    	{
            		get { return GetRelatedProperty<System.String>("RoleName"); }
            		set { SetRelatedProperty("RoleName", value); }
    	}
    
    	public Siska.Data.BModel.Pos.IUser UpdateBy
    	{
            get { return GetRelatedObject<Siska.Data.BModel.Pos.IUser>("UpdateBy"); }
            set { SetRelatedObject<Siska.Data.BModel.Pos.IUser>("UpdateBy", value); }
    	}
    
    	public System.Nullable<System.DateTime> UpdateDate
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("UpdateDate"); }
            		set { SetRelatedProperty("UpdateDate", value); }
    	}
    	public System.Collections.Generic.ICollection<Siska.Data.BModel.Pos.IUser> Users
    	{
    		get { return GetRelatedObjects<Siska.Data.BModel.Pos.IUser>("Users"); }
    		set { SetRelatedObjects("Users", value); }
    								}
    	#endregion
    }
}
namespace Siska.Data.BModel.Pos 
{
    
    public partial class User : BrightstarEntityObject, IUser 
    {
    	public User(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public User() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of Siska.Data.BModel.Pos.IUser
    
    	public System.String Password
    	{
            		get { return GetRelatedProperty<System.String>("Password"); }
            		set { SetRelatedProperty("Password", value); }
    	}
    
    	public System.Boolean RecordStatus
    	{
            		get { return GetRelatedProperty<System.Boolean>("RecordStatus"); }
            		set { SetRelatedProperty("RecordStatus", value); }
    	}
    	public System.Collections.Generic.ICollection<Siska.Data.BModel.Pos.IRole> Roles
    	{
    		get { return GetRelatedObjects<Siska.Data.BModel.Pos.IRole>("Roles"); }
    		set { SetRelatedObjects("Roles", value); }
    								}
    
    	public System.Int32 UserId
    	{
            		get { return GetRelatedProperty<System.Int32>("UserId"); }
            		set { SetRelatedProperty("UserId", value); }
    	}
    
    	public System.String UserName
    	{
            		get { return GetRelatedProperty<System.String>("UserName"); }
            		set { SetRelatedProperty("UserName", value); }
    	}
    	public System.Collections.Generic.ICollection<Siska.Data.BModel.Pos.IUserSession> UserSessions
    	{
    		get { return GetRelatedObjects<Siska.Data.BModel.Pos.IUserSession>("UserSessions"); }
    		set { SetRelatedObjects("UserSessions", value); }
    								}
    	#endregion
    }
}
namespace Siska.Data.BModel.Pos 
{
    
    public partial class UserSession : BrightstarEntityObject, IUserSession 
    {
    	public UserSession(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public UserSession() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of Siska.Data.BModel.Pos.IUserSession
    
    	public System.DateTime LoginDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("LoginDate"); }
            		set { SetRelatedProperty("LoginDate", value); }
    	}
    
    	public System.Int32 LoginStatus
    	{
            		get { return GetRelatedProperty<System.Int32>("LoginStatus"); }
            		set { SetRelatedProperty("LoginStatus", value); }
    	}
    
    	public System.Nullable<System.DateTime> LogOffDate
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("LogOffDate"); }
            		set { SetRelatedProperty("LogOffDate", value); }
    	}
    
    	public System.String SessionId
    	{
            		get { return GetRelatedProperty<System.String>("SessionId"); }
            		set { SetRelatedProperty("SessionId", value); }
    	}
    
    	public Siska.Data.BModel.Pos.IUser User
    	{
            get { return GetRelatedObject<Siska.Data.BModel.Pos.IUser>("User"); }
            set { SetRelatedObject<Siska.Data.BModel.Pos.IUser>("User", value); }
    	}
    
    	public System.Int32 UserSessionId
    	{
            		get { return GetRelatedProperty<System.Int32>("UserSessionId"); }
            		set { SetRelatedProperty("UserSessionId", value); }
    	}
    	#endregion
    }
}
